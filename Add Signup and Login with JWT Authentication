Signup Form:
Input fields: username, email, password, confirmPassword
Client-side validation for matching passwords
Submits POST request to /api/signup
Displays real-time success and error messages
import React, { useState } from 'react';
import axios from 'axios';
function SignupForm() {
  const [form, setForm] = useState({
    username: '',
    email: '',
    password: '',
    confirmPassword: '',
  });

  const [error, setError] = useState('');
  const [success, setSuccess] = useState('');

  const handleChange = (e) => {
    setForm({ ...form, [e.target.name]: e.target.value });
    setError('');
    setSuccess('');
  };

  const handleSubmit = async (e) => {
    e.preventDefault();

    if (form.password !== form.confirmPassword) {
      setError("Passwords don't match");
      return;
    }

    try {
      await axios.post('http://localhost:5000/api/signup', {
        username: form.username,
        email: form.email,
        password: form.password,
      });

      setSuccess('Signup successful!');
      setForm({ username: '', email: '', password: '', confirmPassword: '' });
    } catch (err) {
      const msg =
        err.response?.data?.message || 'Signup failed. Please try again.';
      setError(msg);
    }
  };

  return (
    <form onSubmit={handleSubmit} className="max-w-md mx-auto p-4 shadow rounded-xl bg-white mt-10">
      <h2 className="text-2xl font-bold mb-4 text-center">üî• Join Habit Heat</h2>
      <input
        name="username"
        placeholder="Username"
        value={form.username}
        onChange={handleChange}
        required
        className="w-full mb-2 p-2 border border-gray-300 rounded"
      />
      <input
        name="email"
        type="email"
        placeholder="Email"
        value={form.email}
        onChange={handleChange}
        required
        className="w-full mb-2 p-2 border border-gray-300 rounded"
      />
      <input
        name="password"
        type="password"
        placeholder="Password"
        value={form.password}
        onChange={handleChange}
        required
        className="w-full mb-2 p-2 border border-gray-300 rounded"
      />
      <input
        name="confirmPassword"
        type="password"
        placeholder="Confirm Password"
        value={form.confirmPassword}
        onChange={handleChange}
        required
        className="w-full mb-4 p-2 border border-gray-300 rounded"
      />
      {error && <p className="text-red-500 mb-2">{error}</p>}
      {success && <p className="text-green-500 mb-2">{success}</p>}
      <button
        type="submit"
        className="w-full bg-orange-500 text-white font-semibold py-2 px-4 rounded hover:bg-orange-600"
      >
        Create Account
      </button>
    </form>
  );
}

function LoginForm() {
  const [form, setForm] = useState({ email: '', password: '' });
  const [error, setError] = useState('');
  const [token, setToken] = useState('');

  const handleChange = (e) => {
    setForm({ ...form, [e.target.name]: e.target.value });
    setError('');
  };

  const handleLogin = async (e) => {
    e.preventDefault();

    try {
      const res = await axios.post('http://localhost:5000/api/login', form);
      setToken(res.data.token);
      setError('');
    } catch (err) {
      setError(err.response?.data?.message || 'Login failed');
    }
  };

  return (
    <div className="max-w-md mx-auto mt-10 p-4 shadow rounded-xl bg-white">
      <h2 className="text-2xl font-bold mb-4">üîê Login</h2>
      <form onSubmit={handleLogin}>
        <input
          name="email"
          type="email"
          placeholder="Email"
          value={form.email}
          onChange={handleChange}
          required
          className="w-full mb-2 p-2 border border-gray-300 rounded"
        />
        <input
          name="password"
          type="password"
          placeholder="Password"
          value={form.password}
          onChange={handleChange}
          required
          className="w-full mb-2 p-2 border border-gray-300 rounded"
        />
        {error && <p className="text-red-500">{error}</p>}
        {token && <p className="text-green-500">Token: {token.slice(0, 20)}...</p>}
        <button
          type="submit"
          className="w-full bg-blue-600 text-white font-semibold py-2 px-4 rounded hover:bg-blue-700"
        >
          Login
        </button>
      </form>
    </div>
  );
}

export default function App() {
  return (
    <div className="p-4">
      <SignupForm />
      <hr className="my-8" />
      <LoginForm />
    </div>
  );
}
